---
title: "Seminar 1 notes"
date: 10.10.23
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---



```{r}

library(readr)
library(readxl)

cycling_data <-
  read_excel("data/tr036_dxa_data_21.10.24.xlsx", na = "na") %>%
  mutate(VAT_masse = as.numeric(str_extract(VAT_masse, "//d//d//d,//d"))) %>% print()
  #mutate(VAT_masse = as.numeric(str_replace(VAT_masse, " ", ""))) %>% 
           #) %>% 
  print()



  
  
  glimpse()
  
  print() 
  dplyr::select(id, period, timepoint, age, date, VAT_masse) %>% 
  mutate(as.numeric(VAT_masse)) %>% print()
  pivot_longer(names_to = "variable", values_to = "value", cols = VAT_masse) %>%
  mutate(value = gsub("kg", "", value),
         value = str_replace_all(value,"\\s", ""),
         value = as.numeric(value))
  print()


  
data <- read.csv("data/tr036_dxa_hele kroppen komp.txt", sep = "\t", header = TRUE) %>% 
  print()
  
  



```






### **Seminar 1 10.10.23 notes**

#### Tips til Repeat

Lage en "package" med datasettene vÃ¥re som alle kan laste ned

#### ggplot

Data --\> asthetics --\> geometric objects --\> facets --\> statistical transformations --\> coordinates --\> theme and annotations

#### How to make "senket skrift"

VO~2max~

#### Fotnote

This is a \[\^footnote\]

\[\^footnote\]

### Other tips

In quarto you can make html, pdf and docx from the same quatro-file. Make html-files first, then docx or pdf

#### Code chuncks

ctrl+alt+i = new code chunck

#### Pipes

\|\> or %\>% ?

Double :: means search for the dataset inside the package

```{r}

library(tidyverse)
library(exscidata)

dplyr::starwars

starwars %>% view()

# Base R forward pipe operator
exscidata::dxadata |> # Smart to define that I am searching for this dataset in this package
  select(participant)
  
# Magritter forward pipe operator
exscidata::dxadata %>% 
  select(participant)
  
# Both pipes operators uses whats on the left side and uses it as the first argument in the next function (dependencies)


exscidata::dxadata |>
  lm(weight ~ height, data = _) # Low line means that data is fetched from what is left from the operator

exscidata::dxadata %>% 
  lm(weight ~ height, data = .) # The lm function cannot be piped further

# "Pipable" functions have "data" as the first argument

  
dplyr::select() # The select-function is in several packages, so smart to define that I want to use the one in the dplyr package


```

### Reading data into R

readr provides functions for reading and writing delimiter separated files, such as .csv

readxl provides functions for reading excel-files

### The verbs of data wrangling

Verb = take data and make different observations (in dplyr in the tidyverse package)

Useful functions select, rename, relocate, mutate, filter, arrange, summarize

chr = text data dbl = numeric data fctr =

#### The select function

```{r}

library(exscidata)
glimpse(exscidata::dxadata) # Function that shows us a glimpse of the data

exscidata::dxadata |>
  select(participant:weight, starts_with("lean.") & contains("_leg")) 
# : to choose every variable from x to y
# use start_with and/or contains to select variables


exscidata::dxadata |>
  select(weight, fp = participant) # Selecting weight, and selecting participant and change the name from participant to fp

exscidata::dxadata |>
  select(participant:weight) |> # Choose variables from participant to weight
  rename (kg = weight) |> # Rename the variable
  relocate(kg, .before = participant) # Relocate the order of variables (can use .after and . before)

# Type ?select in the console to get information about the function

exscidata::dxadata |>
  select(where(is.numeric)) # To check if variables are numeric


```

#### The mutate fuction

```{r}
library(exscidata)

exscidata::dxadata %>% 
  select(participant:weight, lean.whole) %>%   
  mutate(rel_lean = 100 * (lean.whole/1000/weight),# % lean mass of total body mass
         anewvariable = rnorm(80, 0, 1)) %>% 
  relocate(c(rel_lean, anewvariable), .before = participant) %>% # Combines variables by using c() and then relocate
  print()


```

### Tidy data

One variable is one coloumn, one observation is one row

#### Pivot data

```{r}

library(exscidata)

## Create a small dataset containing volume/leg information
leg_volume <- exscidata::dxadata %>% 
  select(participant, time, include, multiple, single) %>% 
  pivot_longer(names_to = "volume",  # Making a new column named "volume"
               values_to = "leg",    # Making a new column named "leg"
               cols = single:multiple) %>% 
  distinct(participant, volume, leg) %>% # Only keeping the unique combinations of variables, ie.the variables only appears once (not pre single + multiple and post single + multiple, but just single + multiple for each participant. Ie, each participant appears two times, not four)
  print()


## Create another small dataset containining lean mass/leg information
lean_mass <- exscidata::dxadata %>% 
  select(participant, time, include, starts_with("lean.") & contains("leg")) %>%
  select(-lean.legs) %>% # Write "contains ("_legs") instead to make code shorter
  pivot_longer(names_to = "leg",
               values_to = "leanmass",
               cols = starts_with("lean")) %>% 
  mutate(leg = if_else(leg == "lean.left_leg", "L", "R")) %>% # If leg is "lean.left_leg", change name to "L", if not change name to "R"
  print()


## Joining datasets

# Can use left_join, right_join, inner_join, full_join, anti_join
# Inner_join only uses variables that exist in both datasets (removes variables) so that we dont get missing values
# If your dataset is complete, it is not 

lean_mass <- full_join(leg_volume, lean_mass)




```

#### Include and exclude variables

```{r}

lean_mass %>% 
  filter(include == "incl") %>% # Select only the "incl" variables
  print()

lean_mass %>% 
  filter(include != "excl") %>% # Not select the "excl" variables
  print()

lean_mass %>% 
  filter(!(include != "excl")) %>% # Not select not "excl" variables
  print()

INCL <- lean_mass$include == "incl"  # True and false to statement
# $ means that in this dataset, I want the variable include

!INCL # True shifts to false

lean_mass %>% 
  filter(INCL) %>% 
  print()


lean_mass %>% 
  filter(include == "excl" | volume == "single" & leanmass > 9000) %>% 
  # Include "excl" or volume = "single" and leanmass over 9000
  print()




lean_mass %>% 
  filter(include == "incl") %>% # Select only the "incl" variables
  print()


data.frame(lean_mass) %>% # Making the tibble to a data frame
  mutate(leanmass = if_else(time == "pre", leanmass - 1000, leanmass)) %>% 
  group_by(time) %>% # Group_by revert the data frame back to a tibble
  filter(leanmass > median(leanmass)) %>% 
  group_by(time) %>%
  summarize(n = n()) %>% 
  print()


```

#### Summarize

```{r}

lean_mass |> 
  filter(include == "incl") |> 
  group_by(volume, time) |>  
  summarise(Median = median(leanmass)) |>  
  group_by() |> 
  print()

# Obs! group_by sticks with the data unless you ungroup (group_by())

lean_mass |>
  filter(include == "incl") |>
  
  summarise(Median = median(leanmass),
            Mean = mean(leanmass),
            SD = sd(leanmass),
            q25 = quantile(leanmass, 0.25),
            q75 = quantile(leanmass, 0.75),
            Min = min(leanmass),
            Max = max(leanmass),
            
            .by = c(time, volume)) |> # Vil ikke groupe seg
  print()







```

Have this in a script?

```{r}
# X Source on Save (running the code each time the file is saved)
# crtl + shift + F10 = restarting R session


# Load packages
library(tidyverse)
library(exscidata)
library(ggplot2)


# Plot using ggplot2

leg_volume <- exscidata::dxadata %>% 
  select(participant, time, include, multiple, single) %>% 
  pivot_longer(names_to = "volume",  
               values_to = "leg",    
               cols = single:multiple) %>% 
  distinct(participant, volume, leg) %>%  
  print()

lean_mass <- exscidata::dxadata %>% 
  select(participant, time, include, starts_with("lean.") & contains("leg")) %>%
  select(-lean.legs) %>% 
  pivot_longer(names_to = "leg",
               values_to = "leanmass",
               cols = starts_with("lean")) %>% 
  mutate(leg = if_else(leg == "lean.left_leg", "L", "R")) %>% 
  print()

lean_mass <- full_join(leg_volume, lean_mass) %>% 
  print()


lean_mass_sum <- lean_mass |>
  filter(include == "incl") |>
  group_by(time, volume) |>
  summarise(Median = median(leanmass),
            Mean = mean(leanmass),
            SD = sd(leanmass),
            q25 = quantile(leanmass, 0.25),
            q75 = quantile(leanmass, 0.75),
            Min = min(leanmass),
            Max = max(leanmass)) |> 
  print()


 p <- lean_mass_sum |>
  filter(include == "incl") |>
  mutate(time, factor(time, levels = c("pre", "post")))|>
  ggplot(aes(time, leanmass, fill = volume)) + 
  geom_boxplot() |>
  print()




p <- ggplot(data = lean_mass_sum,
            aes(time, Median, color = volume)) +
     geom_point() +
     geom_point(aes(y = Mean), shape = 21)
p


# Save the file as a pdf-file
ggsave("figures/lean_mass.pdf",
       p,
       width = 8.9,
       height = 8.8,
       units = "cm")

# Have a window open in internet to show the pdf-file and refresh to see 
# changes when code are changed





```
